// backend/controllers/notificacaoAutomaticaController.js
const notificacaoService = require('../services/notificacaoAutomaticaService');
const agendadorNotificacoes = require('../services/agendadorNotificacoes');
const Inquilino = require('../models/Inquilino');
const Contrato = require('../models/Contrato');

class NotificacaoAutomaticaController {

  // üìä Obter status do sistema de notifica√ß√µes
  async obterStatus(req, res) {
    try {
      const status = agendadorNotificacoes.obterStatus();
      
      res.json({
        success: true,
        data: {
          ...status,
          sistemaAtivo: status.isRunning,
          ultimaVerificacao: new Date().toISOString(),
          configuracoes: {
            aniversarios: { ativo: true, horario: '09:00', frequencia: 'Di√°rio' },
            vencimentosAluguel: { ativo: true, horario: '08:00', frequencia: 'Di√°rio' },
            vencimentosContrato: { ativo: true, horario: '10:00', frequencia: 'Segunda-feira' },
            relatorioSemanal: { ativo: true, horario: '17:00', frequencia: 'Sexta-feira' }
          }
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao obter status:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao obter status do sistema',
        error: error.message
      });
    }
  }

  // üöÄ Iniciar sistema de notifica√ß√µes autom√°ticas
  async iniciarSistema(req, res) {
    try {
      agendadorNotificacoes.iniciar();
      
      res.json({
        success: true,
        message: 'üöÄ Sistema de notifica√ß√µes autom√°ticas iniciado com sucesso!',
        data: agendadorNotificacoes.obterStatus()
      });
    } catch (error) {
      console.error('‚ùå Erro ao iniciar sistema:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao iniciar sistema de notifica√ß√µes',
        error: error.message
      });
    }
  }

  // üõë Parar sistema de notifica√ß√µes autom√°ticas
  async pararSistema(req, res) {
    try {
      agendadorNotificacoes.parar();
      
      res.json({
        success: true,
        message: 'üõë Sistema de notifica√ß√µes autom√°ticas parado com sucesso!',
        data: agendadorNotificacoes.obterStatus()
      });
    } catch (error) {
      console.error('‚ùå Erro ao parar sistema:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao parar sistema de notifica√ß√µes',
        error: error.message
      });
    }
  }

  // üîß Executar verifica√ß√£o manual
  async executarVerificacaoManual(req, res) {
    try {
      await agendadorNotificacoes.executarVerificacaoManual();
      
      res.json({
        success: true,
        message: 'üîß Verifica√ß√£o manual executada com sucesso!',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o manual:', error);
      res.status(500).json({
        success: false,
        message: 'Erro na verifica√ß√£o manual',
        error: error.message
      });
    }
  }

  // üéÇ Testar envio de parab√©ns (para desenvolvimento)
  async testarParabens(req, res) {
    try {
      const { inquilinoId, nome, email, idade } = req.body;

      if (!nome || !email) {
        return res.status(400).json({
          success: false,
          message: 'Nome e email s√£o obrigat√≥rios'
        });
      }

      const inquilinoTeste = {
        _id: inquilinoId || 'teste',
        nome,
        email,
        idade: idade || null
      };

      await notificacaoService.enviarParabensAniversario(inquilinoTeste);

      res.json({
        success: true,
        message: `üéÇ E-mail de parab√©ns enviado com sucesso para ${nome}!`,
        data: {
          destinatario: email,
          tipo: 'aniversario',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao testar parab√©ns:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao enviar e-mail de parab√©ns',
        error: error.message
      });
    }
  }

  // üëã Testar envio de boas-vindas
  async testarBoasVindas(req, res) {
    try {
      const { nome, email, tipoUsuario } = req.body;

      if (!nome || !email) {
        return res.status(400).json({
          success: false,
          message: 'Nome e email s√£o obrigat√≥rios'
        });
      }

      const usuarioTeste = {
        _id: 'teste',
        nome,
        email
      };

      await notificacaoService.enviarBoasVindas(usuarioTeste, tipoUsuario || 'inquilino');

      res.json({
        success: true,
        message: `üëã E-mail de boas-vindas enviado com sucesso para ${nome}!`,
        data: {
          destinatario: email,
          tipo: 'boas-vindas',
          tipoUsuario: tipoUsuario || 'inquilino',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao testar boas-vindas:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao enviar e-mail de boas-vindas',
        error: error.message
      });
    }
  }

  // üí∞ Testar lembrete de vencimento
  async testarLembreteVencimento(req, res) {
    try {
      const { 
        nomeInquilino, 
        emailInquilino, 
        valorAluguel, 
        dataVencimento, 
        diasRestantes 
      } = req.body;

      if (!nomeInquilino || !emailInquilino || !valorAluguel || !dataVencimento) {
        return res.status(400).json({
          success: false,
          message: 'Todos os campos s√£o obrigat√≥rios'
        });
      }

      const contratoTeste = {
        _id: 'teste',
        valorAluguel: parseFloat(valorAluguel),
        dataVencimento: new Date(dataVencimento),
        inquilino: {
          nome: nomeInquilino,
          email: emailInquilino
        }
      };

      await notificacaoService.enviarLembreteVencimentoAluguel(contratoTeste, diasRestantes || 7);

      res.json({
        success: true,
        message: `üí∞ Lembrete de vencimento enviado com sucesso para ${nomeInquilino}!`,
        data: {
          destinatario: emailInquilino,
          tipo: 'vencimento-aluguel',
          valor: valorAluguel,
          vencimento: dataVencimento,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao testar lembrete:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao enviar lembrete de vencimento',
        error: error.message
      });
    }
  }

  // üìà Testar notifica√ß√£o de reajuste
  async testarReajuste(req, res) {
    try {
      const { 
        nomeInquilino, 
        emailInquilino, 
        valorAtual, 
        percentualReajuste, 
        dataVigencia 
      } = req.body;

      if (!nomeInquilino || !emailInquilino || !valorAtual || !percentualReajuste || !dataVigencia) {
        return res.status(400).json({
          success: false,
          message: 'Todos os campos s√£o obrigat√≥rios'
        });
      }

      const contratoTeste = {
        _id: 'teste',
        valorAluguel: parseFloat(valorAtual),
        inquilino: {
          nome: nomeInquilino,
          email: emailInquilino
        }
      };

      await notificacaoService.enviarNotificacaoReajuste(
        contratoTeste, 
        parseFloat(percentualReajuste), 
        new Date(dataVigencia)
      );

      res.json({
        success: true,
        message: `üìà Notifica√ß√£o de reajuste enviada com sucesso para ${nomeInquilino}!`,
        data: {
          destinatario: emailInquilino,
          tipo: 'reajuste-anual',
          valorAtual: valorAtual,
          percentualReajuste: percentualReajuste,
          dataVigencia: dataVigencia,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao testar reajuste:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao enviar notifica√ß√£o de reajuste',
        error: error.message
      });
    }
  }

  // üè† Testar vencimento de contrato
  async testarVencimentoContrato(req, res) {
    try {
      const { 
        nomeInquilino, 
        emailInquilino, 
        enderecoImovel, 
        dataVencimento, 
        diasRestantes 
      } = req.body;

      if (!nomeInquilino || !emailInquilino || !enderecoImovel || !dataVencimento) {
        return res.status(400).json({
          success: false,
          message: 'Todos os campos s√£o obrigat√≥rios'
        });
      }

      const contratoTeste = {
        _id: 'teste',
        dataFim: new Date(dataVencimento),
        inquilino: {
          nome: nomeInquilino,
          email: emailInquilino
        },
        imovel: {
          endereco: enderecoImovel
        }
      };

      await notificacaoService.enviarLembreteVencimentoContrato(contratoTeste, diasRestantes || 60);

      res.json({
        success: true,
        message: `üè† Lembrete de vencimento de contrato enviado com sucesso para ${nomeInquilino}!`,
        data: {
          destinatario: emailInquilino,
          tipo: 'vencimento-contrato',
          endereco: enderecoImovel,
          vencimento: dataVencimento,
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('‚ùå Erro ao testar vencimento de contrato:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao enviar lembrete de vencimento de contrato',
        error: error.message
      });
    }
  }

  // üìã Listar tipos de notifica√ß√£o dispon√≠veis
  async listarTiposNotificacao(req, res) {
    try {
      const tipos = [
        {
          id: 'aniversario',
          nome: 'üéÇ Parab√©ns de Anivers√°rio',
          descricao: 'E-mail autom√°tico de parab√©ns no anivers√°rio do inquilino',
          frequencia: 'Anual',
          ativo: true
        },
        {
          id: 'boas-vindas',
          nome: 'üëã Boas-vindas',
          descricao: 'E-mail de boas-vindas para novos usu√°rios',
          frequencia: '√önico',
          ativo: true
        },
        {
          id: 'vencimento-aluguel',
          nome: 'üí∞ Vencimento de Aluguel',
          descricao: 'Lembrete de vencimento de aluguel (7 dias antes)',
          frequencia: 'Mensal',
          ativo: true
        },
        {
          id: 'reajuste-anual',
          nome: 'üìà Reajuste Anual',
          descricao: 'Notifica√ß√£o de reajuste anual de aluguel',
          frequencia: 'Anual',
          ativo: true
        },
        {
          id: 'vencimento-contrato',
          nome: 'üè† Vencimento de Contrato',
          descricao: 'Lembrete de vencimento de contrato (60 dias antes)',
          frequencia: 'Conforme contrato',
          ativo: true
        }
      ];

      res.json({
        success: true,
        data: tipos,
        total: tipos.length
      });
    } catch (error) {
      console.error('‚ùå Erro ao listar tipos:', error);
      res.status(500).json({
        success: false,
        message: 'Erro ao listar tipos de notifica√ß√£o',
        error: error.message
      });
    }
  }
}

module.exports = new NotificacaoAutomaticaController();